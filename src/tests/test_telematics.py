# src/tests/test_telematics.py
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ obd_data_large.csv.
–ü—Ä—è–º–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ—é—â–∏–µ—Å—è —Å—Ç–æ–ª–±—Ü—ã accel_x/y/z, –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ accData.
"""

import unittest

import numpy as np
import pandas as pd
from pathlib import Path
from src.models.lightgbm.telematics_model import TelematicsRiskModel


class TestObdDataLarge(unittest.TestCase):

    def setUp(self):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
        self.file_path = "src/data/raw/test_telemetry/obd_data_large.csv"
        if not Path(self.file_path).exists():
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.file_path}")

        self.df = pd.read_csv(self.file_path)
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.df)} —Å—Ç—Ä–æ–∫ –∏–∑ {self.file_path}.")

    def test_columns_present(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å—Ç—å"""
        required_cols = {
            'trip_id', 'driver_id', 'timestamp', 'gps_speed',
            'accel_x', 'accel_y', 'accel_z'
        }
        missing = required_cols - set(self.df.columns)

        self.assertEqual(len(missing), 0, f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–æ–ª–æ–Ω–∫–∏: {missing}")
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")

    def test_no_empty_gps_speed(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π gps_speed"""
        invalid_rows = self.df[self.df['gps_speed'].isna()]
        self.assertEqual(len(invalid_rows), 0, f"‚ùå –ï—Å—Ç—å —Å—Ç—Ä–æ–∫–∏ —Å –ø—É—Å—Ç—ã–º gps_speed: {len(invalid_rows)}")
        print("‚úÖ –ù–µ—Ç –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å–∫–æ—Ä–æ—Å—Ç–∏.")

    def test_valid_speed_range(self):
        """–°–∫–æ—Ä–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 0‚Äì200 –∫–º/—á"""
        out_of_range = self.df[(self.df['gps_speed'] < 0) | (self.df['gps_speed'] > 200)]
        self.assertEqual(len(out_of_range), 0, f"‚ùå –°–∫–æ—Ä–æ—Å—Ç—å –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {len(out_of_range)} —Å—Ç—Ä–æ–∫")
        print("‚úÖ –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.")

    def test_trip_duration_and_features(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–µ–∑–¥–∫–∏"""
        results = []

        for trip_id, group in self.df.groupby('trip_id'):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è
            group = group.copy()
            group['timestamp'] = pd.to_datetime(group['timestamp'], errors='coerce')
            group.dropna(subset=['timestamp'], inplace=True)
            group.sort_values('timestamp', inplace=True)

            duration_seconds = (group['timestamp'].max() - group['timestamp'].min()).total_seconds()

            avg_speed = group['gps_speed'].mean()
            max_speed = group['gps_speed'].max()

            # –†–µ–∑–∫–∏–µ —É—Å–∫–æ—Ä–µ–Ω–∏—è/—Ç–æ—Ä–º–æ–∂–µ–Ω–∏—è (–ø—Ä–æ–¥–æ–ª—å–Ω–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ)
            longitudinal_accel = group['accel_y']
            hard_brakes = ((longitudinal_accel < -2.0) & (group['gps_speed'] > 10)).sum()
            hard_accels = (longitudinal_accel > 2.0).sum()

            # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã (–±–æ–∫–æ–≤–æ–µ —É—Å–∫–æ—Ä–µ–Ω–∏–µ)
            lateral_accel = group['accel_x']
            sharp_turns = (np.abs(lateral_accel) > 3.0).sum()

            # –í–æ–∂–¥–µ–Ω–∏–µ –Ω–æ—á—å—é
            night_driving = group['timestamp'].dt.hour.isin(range(0, 6))
            night_driving_ratio = night_driving.mean()

            result = {
                'trip_id': trip_id,
                'duration_sec': duration_seconds,
                'avg_speed': avg_speed,
                'max_speed': max_speed,
                'hard_brakes': int(hard_brakes),
                'hard_accels': int(hard_accels),
                'sharp_turns': int(sharp_turns),
                'night_driving_ratio': night_driving_ratio,
                'has_dtc_errors': False,
                'data_frequency_hz': len(group) / (duration_seconds + 1e-8)
            }
            results.append(result)

            print(f"\nüìä –ü–æ–µ–∑–¥–∫–∞ ID {int(trip_id)}:")
            print(f"   ‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:         {duration_seconds:.0f} —Å–µ–∫")
            print(f"   ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å:     {avg_speed:.1f} –∫–º/—á")
            print(f"   ‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è:         {max_speed:.1f} –∫–º/—á")
            print(f"   ‚Ä¢ –†–µ–∑–∫–∏–µ —Ç–æ—Ä–º–æ–∑–∞:       {hard_brakes}")
            print(f"   ‚Ä¢ –†–µ–∑–∫–∏–µ —Ä–∞–∑–≥–æ–Ω—ã:       {hard_accels}")
            print(f"   ‚Ä¢ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã: {sharp_turns}")
            print(f"   ‚Ä¢ –î–æ–ª—è –Ω–æ—á–Ω–æ–≥–æ:         {night_driving_ratio:.1%}")

        return pd.DataFrame(results)

    def test_model_prediction(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –Ω–∞ –∏–∑–≤–ª–µ—á—ë–Ω–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö"""
        features_df = self.test_trip_duration_and_features()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = TelematicsRiskModel(model_path="src/outputs/lightgbm/telematics_model_v1.pkl")

        print("\nüéØ –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("=" * 50)

        for _, row in features_df.iterrows():
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
            X = row.drop(['trip_id']).to_frame().T  # —Å–¥–µ–ª–∞—Ç—å DataFrame

            try:
                risk_score = model.predict_risk(X)
                print(f"–ü–æ–µ–∑–¥–∫–∞ ID {int(row['trip_id'])} ‚Üí —Ä–∏—Å–∫ –î–¢–ü: {risk_score:.2%}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –¥–ª—è –ø–æ–µ–∑–¥–∫–∏ {row['trip_id']}: {e}")


if __name__ == '__main__':
    unittest.main()