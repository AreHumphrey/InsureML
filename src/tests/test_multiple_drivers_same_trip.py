# src/tests/test_multiple_drivers_same_trip.py
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ OBD-—Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π.
"""

from src.models.hybrid.kbm_calculator import HybridKBMCalculator


def main():
    print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–î–ù–û–ô –ü–û–ï–ó–î–ö–ò –î–õ–Ø –†–ê–ó–ù–´–• –í–û–î–ò–¢–ï–õ–ï–ô")
    print("=" * 90)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
    calculator = HybridKBMCalculator(model_path="src/outputs/insurance_model_v1.cbm")

    # –†–∞–∑–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ ‚Äî –æ—Ç –Ω–∏–∑–∫–æ–≥–æ –¥–æ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    drivers = [
        {
            'driver_age': 55,
            'driver_experience': 30,
            'vehicle_age': 5,
            'vehicle_type': 'suv',
            'engine_power': 180,
            'vehicle_purpose': 'personal',
            'region': 'rural',
            'pct_days_with_snow': 0.4,
            'pct_days_with_rain': 0.3,
            'winter_duration_months': 6,
            'base_kbm': 0.85,
            'num_claims': 0,
            'violation_count': 0,
            'days_since_last_claim': 1095,
            'occupation_type': 'retired',
            'avg_trips_per_week': 2,
            'night_driving_ratio': 0.05,
            'ko_multiplier': 1.0,
            'num_owned_vehicles': 1,
            'description': '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä (–Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫)'
        },
        {
            'driver_age': 35,
            'driver_experience': 12,
            'vehicle_age': 2,
            'vehicle_type': 'van',
            'engine_power': 160,
            'vehicle_purpose': 'commercial',
            'region': 'Moscow',
            'pct_days_with_snow': 0.35,
            'pct_days_with_rain': 0.45,
            'winter_duration_months': 5,
            'base_kbm': 1.0,
            'num_claims': 1,
            'violation_count': 0,
            'days_since_last_claim': 600,
            'occupation_type': 'courier',
            'avg_trips_per_week': 20,
            'night_driving_ratio': 0.4,
            'ko_multiplier': 1.0,
            'num_owned_vehicles': 1,
            'description': '–ö—É—Ä—å–µ—Ä (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)'
        },
        {
            'driver_age': 24,
            'driver_experience': 3,
            'vehicle_age': 1,
            'vehicle_type': 'hatchback',
            'engine_power': 105,
            'vehicle_purpose': 'personal',
            'region': 'urban',
            'pct_days_with_snow': 0.3,
            'pct_days_with_rain': 0.4,
            'winter_duration_months': 4,
            'base_kbm': 1.0,
            'num_claims': 0,
            'violation_count': 2,
            'days_since_last_claim': 100,
            'occupation_type': 'student',
            'avg_trips_per_week': 6,
            'night_driving_ratio': 0.3,
            'ko_multiplier': 1.0,
            'num_owned_vehicles': 1,
            'description': '–ú–æ–ª–æ–¥–æ–π –≤–æ–¥–∏—Ç–µ–ª—å —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏'
        }
    ]

    # –°–ø–∏—Å–æ–∫ OBD-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    obd_files = [
        None,
        "src/data/tests/v2_no_dtc.csv",
        "src/data/tests/v2_with_dtc.csv",
        "src/data/tests/v2_aggressive.csv"
    ]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
    print(f"{'–í–æ–¥–∏—Ç–µ–ª—å':<25} {'–§–∞–π–ª':<25} {'–ë–∞–∑–æ–≤—ã–π –ö–ë–ú':<12} {'–†–µ–∫–æ–º–µ–Ω–¥. –ö–ë–ú':<14} {'–ò—Ç–æ–≥–æ–≤—ã–π –ö–ë–ú':<13} {'DTC'}")
    print("-" * 90)

    for driver in drivers:
        for obd_file in obd_files:
            file_name = obd_file or "–ù–µ—Ç —Ñ–∞–π–ª–∞"
            has_dtc_str = "‚Äî"

            # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
            result_df = calculator.calculate(
                cases=[driver],
                obd_file_path=obd_file,
                show_plot=False
            )

            row = result_df.iloc[0]
            base_kbm = row['–ë–∞–∑–æ–≤—ã–π –ö–ë–ú']
            adj_kbm = row['–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ö–ë–ú']
            final_kbm = row['–ò—Ç–æ–≥–æ–≤—ã–π –ö–ë–ú']

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ DTC
            if '–Ω–∞–ª–∏—á–∏–µ DTC' in row['–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏']:
                has_dtc_str = "–î–∞"
            elif '–Ω–µ—Ç' not in row['–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏']:
                has_dtc_str = "–ù–µ—Ç"

            print(f"{driver['description']:<25} "
                  f"{file_name.split('/')[-1]:<25} "
                  f"{base_kbm:<12} "
                  f"{adj_kbm:<14} "
                  f"{final_kbm:<13} "
                  f"{has_dtc_str}")

        print("‚îÄ" * 90)  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –≤–æ–¥–∏—Ç–µ–ª—è–º–∏

    print("‚úÖ –í—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã.")


if __name__ == "__main__":
    main()