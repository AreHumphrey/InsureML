
import pandas as pd
import numpy as np
from pathlib import Path


def validate_columns(df):
    required_columns = {'tripID', 'timeStamp', 'gps_speed', 'accData'}
    missing = required_columns - set(df.columns)
    if missing:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing}")
        return False
    else:
        print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return True

def parse_accData(acc_str):

    try:

        acc_str = str(acc_str).strip()

        if acc_str.startswith('[') and ']' in acc_str:
            values = [float(x.strip()) for x in acc_str.strip('[]').split(',')]
            if len(values) >= 3:
                return values[0], values[1], values[2]

        if len(acc_str) > 10 and all(c in '0123456789abcdefABCDEF' for c in acc_str):

            try:
                x_hex = acc_str[0:2]
                y_hex = acc_str[2:4]
                z_hex = acc_str[4:6]
                ax = int(x_hex, 16) - 128
                ay = int(y_hex, 16) - 128
                az = int(z_hex, 16) - 128

                scale = 0.5
                return ax * scale, ay * scale, az * scale
            except:
                return np.nan, np.nan, np.nan

        return np.nan, np.nan, np.nan

    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ accData: {e}")
        return np.nan, np.nan, np.nan

def extract_acceleration_components(df):
    print("üîß –ü–∞—Ä—Å–∏–Ω–≥ accData...")
    parsed = df['accData'].astype(str).apply(parse_accData)
    acc_df = pd.DataFrame(parsed.tolist(), columns=['accel_x', 'accel_y', 'accel_z'])
    result = pd.concat([df.reset_index(drop=True), acc_df], axis=1)
    return result

def clean_data(df):
    initial_len = len(df)
    df['gps_speed'] = pd.to_numeric(df['gps_speed'], errors='coerce')
    df.dropna(subset=['gps_speed', 'accData'], inplace=True)
    df = df[(df['gps_speed'] >= 0) & (df['gps_speed'] <= 200)]
    cleaned_len = len(df)
    print(f"üßπ –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –æ—Å—Ç–∞–ª–æ—Å—å {cleaned_len} —Å—Ç—Ä–æ–∫ ({initial_len - cleaned_len} —É–¥–∞–ª–µ–Ω–æ).")
    return df

def assess_trip_quality(df):
    if len(df) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
        return False

    df['dt'] = pd.to_datetime(df['timeStamp'], errors='coerce')
    df.dropna(subset=['dt'], inplace=True)
    if len(df) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏.")
        return False

    duration_seconds = (df['dt'].max() - df['dt'].min()).total_seconds()
    if duration_seconds < 10:
        print(f"‚ö†Ô∏è  –ü–æ–µ–∑–¥–∫–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è: {duration_seconds:.1f} —Å–µ–∫—É–Ω–¥ (<10 —Å–µ–∫).")
        return False

    avg_speed = df['gps_speed'].mean()
    if avg_speed < 5:
        print(f"‚ö†Ô∏è  –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è: {avg_speed:.1f} –∫–º/—á.")
        return False

    data_completeness = len(df) / (duration_seconds + 1)
    if data_completeness < 0.1:
        print(f"‚ö†Ô∏è  –ù–∏–∑–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –¥–∞–Ω–Ω—ã—Ö: {data_completeness:.2f} –ì—Ü.")
        return False

    print(f"üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ–µ–∑–¥–∫–∏: —Ö–æ—Ä–æ—à–µ–µ. –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_seconds:.0f} —Å–µ–∫, —Å—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {avg_speed:.1f} –∫–º/—á, —á–∞—Å—Ç–æ—Ç–∞: {data_completeness:.2f} –ì—Ü.")
    return True

def extract_behavior_features(df):
    features = {}
    features['avg_speed'] = df['gps_speed'].mean()
    features['max_speed'] = df['gps_speed'].max()

    longitudinal_accel = df['accel_y']
    valid_accel = longitudinal_accel.dropna()
    if len(valid_accel) > 0:
        features['hard_brakes'] = ((valid_accel < -2.0) & (df['gps_speed'] > 10)).sum()
        features['hard_accels'] = (valid_accel > 2.0).sum()
    else:
        features['hard_brakes'] = 0
        features['hard_accels'] = 0

    lateral_accel = df['accel_x'].dropna()
    features['sharp_turns'] = (np.abs(lateral_accel) > 3.0).sum()

    night_driving = df['dt'].dt.hour.isin(range(0, 6))
    features['night_driving_ratio'] = night_driving.mean()

    if 'dtc' in df.columns:
        dtc_vals = pd.to_numeric(df['dtc'], errors='coerce').fillna(0)
        features['has_dtc_errors'] = (dtc_vals > 0).any()
    else:
        features['has_dtc_errors'] = False

    print("\nüìä –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è:")
    for k, v in features.items():
        print(f"   ‚Ä¢ {k}: {v:.2f}" if isinstance(v, float) else f"   ‚Ä¢ {k}: {v}")

    return features


def main():
    file_path = "src/data/raw/obd_data.csv"
    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ–ª–µ–º–∞—Ç–∏–∫–∏: {file_path}")

    if not Path(file_path).exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return

    df = pd.read_csv(file_path, on_bad_lines='skip', low_memory=False)
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Å—Ç—Ä–æ–∫ –∏–∑ obd_data.csv.")

    if not validate_columns(df):
        print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥—Ö–æ–¥—è—Ç.")
        return

    df_clean = clean_data(df)
    if len(df_clean) == 0:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏.")
        return

    df_with_accel = extract_acceleration_components(df_clean)
    if df_with_accel[['accel_x', 'accel_y', 'accel_z']].isna().all().all():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ —É—Å–∫–æ—Ä–µ–Ω–∏—è.")
        return


    print("\n" + "="*70)
    print("–ê–ù–ê–õ–ò–ó –ü–û–ï–ó–î–û–ö")
    print("="*70)

    trip_analysis = []
    for trip_id, group in df_with_accel.groupby('tripID'):
        print(f"\n--- –ü–æ–µ–∑–¥–∫–∞ ID: {trip_id} ---")
        if assess_trip_quality(group):
            feats = extract_behavior_features(group)
            trip_analysis.append({
                'tripID': trip_id,
                'duration_sec': (group['dt'].max() - group['dt'].min()).total_seconds(),
                'avg_speed': feats['avg_speed'],
                'hard_brakes': feats['hard_brakes'],
                'night_driving_ratio': feats['night_driving_ratio'],
                'has_dtc_errors': feats['has_dtc_errors']
            })

    if trip_analysis:
        summary = pd.DataFrame(trip_analysis)
        print("\n" + "="*70)
        print("–°–í–û–î–ö–ê –ü–û –í–°–ï–ú –ü–û–ï–ó–î–ö–ê–ú")
        print("="*70)
        print(f"–í—Å–µ–≥–æ –ø–æ–µ–∑–¥–æ–∫: {len(summary)}")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {summary['duration_sec'].mean():.0f} —Å–µ–∫")
        print(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {summary['avg_speed'].mean():.1f} –∫–º/—á")
        print(f"–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ —Ä–µ–∑–∫–∏—Ö —Ç–æ—Ä–º–æ–∑–æ–≤: {summary['hard_brakes'].mean():.1f}")
        print(f"–î–æ–ª—è –ø–æ–µ–∑–¥–æ–∫ –Ω–æ—á—å—é: {summary['night_driving_ratio'].mean():.1%}")
        print(f"–î–æ–ª—è –ø–æ–µ–∑–¥–æ–∫ —Å –æ—à–∏–±–∫–∞–º–∏ DTC: {summary['has_dtc_errors'].mean():.1%}")


        summary.to_csv("src/data/validation_summary.csv", index=False)
        print("‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: data/validation_summary.csv")
    else:
        print("‚ùå –ù–∏ –æ–¥–Ω–∞ –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞.")

if __name__ == "__main__":
    main()